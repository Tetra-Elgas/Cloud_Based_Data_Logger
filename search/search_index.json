{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Cloud-Based Data Logger Tutorial Carbon dioxide (CO 2 ) is one of the indicators of indoor air quality . Let us take this as an example use case for our Cloud-Based Data Logger Tutorial . Remark. The goal of this tutorial is not the design of a CO 2 -sensor module. The Cloud-based data logger consists of a microcontroller (MCU) and the SCD30 , a CO 2 , temperature and humidity sensor. The MCU is connected by USB-C to a laptop, a router establishes the Cloud connection. The free AllThingsTalk Maker IoT Platform is used for data collection and visualization. TETRA-project HBC.2019.2033, Effecten van luchtkwaliteit op de gezondheid in accommodaties van schepen (ELGAS)","title":"Home"},{"location":"#cloud-based-data-logger-tutorial","text":"Carbon dioxide (CO 2 ) is one of the indicators of indoor air quality . Let us take this as an example use case for our Cloud-Based Data Logger Tutorial . Remark. The goal of this tutorial is not the design of a CO 2 -sensor module. The Cloud-based data logger consists of a microcontroller (MCU) and the SCD30 , a CO 2 , temperature and humidity sensor. The MCU is connected by USB-C to a laptop, a router establishes the Cloud connection. The free AllThingsTalk Maker IoT Platform is used for data collection and visualization. TETRA-project HBC.2019.2033, Effecten van luchtkwaliteit op de gezondheid in accommodaties van schepen (ELGAS)","title":"Cloud-Based Data Logger Tutorial"},{"location":"Cloud_platform/","text":"Cloud platform In this tutorial the AllThingsTalk Maker Developer Cloud platform is used. Note: the free Maker Developer Cloud platform is limited to one ground and max. 10 devices. Ground The ground groups all the relevant IoT resources together ( reference ). Create Ground Next connect the device, by selecting: Your own device . Assets Assets are active components that hold the value of a measure, either in physical or virtual space. The SCD30 sensor module measures 3 physical parameters: CO 2 , temperature and humidity. These 3 parameters are the 3 assets that will be created. device JSON file (device.json) The device JSON file describes the device. { \"device\" : { \"Title\" : \"Data Logger\" , \"name\" : \"Data Logger\" , \"description\" : \"Data Logger\" , \"authentication\" : { \"api\" : \"maker.allthingstalk.io\" , \"Ground_title\" : \"Data_Logger\" , \"Ground_ID\" : \"<yourGroundID>\" , \"Ground_Token\" : \"Bearer maker:<yourGroundToken>\" , \"Device_ID\" : \"<yourDeviceID>\" , \"timeout\" : \"30\" }, \"assets\" : { \"asset#0\" : { \"name\" : \"Counter\" , \"title\" : \"Counter\" , \"kind\" : \"sensor\" , \"description\" : \"\" , \"parameter name\" : \"\" , \"profile\" : { \"type\" : \"number\" , \"unit\" : \"\" } }, \"asset#1\" : { \"name\" : \"Temperature_degC\" , \"title\" : \"Temperature [degC]\" , \"kind\" : \"sensor\" , \"description\" : \"temperature - SCD30 Sensor Module\" , \"profile\" : { \"type\" : \"number\" , \"unit\" : \" degC\" } }, \"asset#2\" : { \"name\" : \"Humidity_perc\" , \"title\" : \"Humidity [%]\" , \"kind\" : \"sensor\" , \"description\" : \"humidity - SCD30 Sensor Module\" , \"profile\" : { \"type\" : \"number\" , \"unit\" : \" %\" } }, \"asset#3\" : { \"name\" : \"CO2_ppm\" , \"title\" : \"CO2 [ppm]\" , \"kind\" : \"sensor\" , \"description\" : \"CO2 - SCD30 Sensor Module\" , \"profile\" : { \"type\" : \"number\" , \"unit\" : \" ppm\" } } }, \"serial\" : { \"com_port\" : \"com14\" , \"baud_rate\" : \"115200\" } } } The Ground ID and Ground token can be found on the ground settings page, the device on the device settings page. asset kind . There are 3 supported asset kings: sensor, actuator and virtual. The data logger measures environmental data, kind = sensor. profile . The profile field defines the data type. The data logger gives for the counter an integer and for the assets related to the SCD30 Sensor Module a decimal, also the unit is provided in the profile field. Create assets Assets can be created by using the AllThingsTalk API . Below a Python function that creates assets. def create_assets ( device_file ): \"\"\" Create the assets on a ground Parameters ---------- device_file: str device json file Returns ------- asset_list: list list of created assets Example ------- >>> import json >>> import requests >>> asset_list = create_assets(\"device.json\") \"\"\" with open ( device_file ) as json_file : device = json . load ( json_file ) url = \"https://\" + device [ \"device\" ][ \"authentication\" ][ \"api\" ] \\ + \"/device/\" + device [ \"device\" ][ \"authentication\" ][ \"Device_ID\" ] \\ + \"/assets\" asset_list = [] for asset_nmb in range ( len ( device [ \"device\" ][ \"assets\" ])): asset = 'asset#' + str ( asset_nmb ) payload = { \"name\" : device [ \"device\" ][ \"assets\" ][ asset ][ \"name\" ], \"title\" : device [ \"device\" ][ \"assets\" ][ asset ][ \"title\" ], \"description\" : device [ \"device\" ][ \"assets\" ][ asset ][ \"description\" ], \"is\" : device [ \"device\" ][ \"assets\" ][ asset ][ \"kind\" ], \"profile\" : device [ \"device\" ][ \"assets\" ][ asset ][ \"profile\" ] } headers = { 'Content-Type' : 'application/json' , 'Authorization' : device [ \"device\" ][ \"authentication\" ][ \"Ground_Token\" ] } response = requests . request ( \"POST\" , url , headers = headers , \\ data = str ( payload ), timeout = 10 ) asset_list . append ( response . json ()) return asset_list import json import requests asset_list = create_assets ( \"device.json\" ) Pinboard Pinboard let you visualize the collected data. Create and arrange Pinboard","title":"Cloud platform"},{"location":"Cloud_platform/#cloud-platform","text":"In this tutorial the AllThingsTalk Maker Developer Cloud platform is used. Note: the free Maker Developer Cloud platform is limited to one ground and max. 10 devices.","title":"Cloud platform"},{"location":"Cloud_platform/#ground","text":"The ground groups all the relevant IoT resources together ( reference ). Create Ground Next connect the device, by selecting: Your own device .","title":"Ground"},{"location":"Cloud_platform/#assets","text":"Assets are active components that hold the value of a measure, either in physical or virtual space. The SCD30 sensor module measures 3 physical parameters: CO 2 , temperature and humidity. These 3 parameters are the 3 assets that will be created.","title":"Assets"},{"location":"Cloud_platform/#device-json-file-devicejson","text":"The device JSON file describes the device. { \"device\" : { \"Title\" : \"Data Logger\" , \"name\" : \"Data Logger\" , \"description\" : \"Data Logger\" , \"authentication\" : { \"api\" : \"maker.allthingstalk.io\" , \"Ground_title\" : \"Data_Logger\" , \"Ground_ID\" : \"<yourGroundID>\" , \"Ground_Token\" : \"Bearer maker:<yourGroundToken>\" , \"Device_ID\" : \"<yourDeviceID>\" , \"timeout\" : \"30\" }, \"assets\" : { \"asset#0\" : { \"name\" : \"Counter\" , \"title\" : \"Counter\" , \"kind\" : \"sensor\" , \"description\" : \"\" , \"parameter name\" : \"\" , \"profile\" : { \"type\" : \"number\" , \"unit\" : \"\" } }, \"asset#1\" : { \"name\" : \"Temperature_degC\" , \"title\" : \"Temperature [degC]\" , \"kind\" : \"sensor\" , \"description\" : \"temperature - SCD30 Sensor Module\" , \"profile\" : { \"type\" : \"number\" , \"unit\" : \" degC\" } }, \"asset#2\" : { \"name\" : \"Humidity_perc\" , \"title\" : \"Humidity [%]\" , \"kind\" : \"sensor\" , \"description\" : \"humidity - SCD30 Sensor Module\" , \"profile\" : { \"type\" : \"number\" , \"unit\" : \" %\" } }, \"asset#3\" : { \"name\" : \"CO2_ppm\" , \"title\" : \"CO2 [ppm]\" , \"kind\" : \"sensor\" , \"description\" : \"CO2 - SCD30 Sensor Module\" , \"profile\" : { \"type\" : \"number\" , \"unit\" : \" ppm\" } } }, \"serial\" : { \"com_port\" : \"com14\" , \"baud_rate\" : \"115200\" } } } The Ground ID and Ground token can be found on the ground settings page, the device on the device settings page. asset kind . There are 3 supported asset kings: sensor, actuator and virtual. The data logger measures environmental data, kind = sensor. profile . The profile field defines the data type. The data logger gives for the counter an integer and for the assets related to the SCD30 Sensor Module a decimal, also the unit is provided in the profile field. Create assets Assets can be created by using the AllThingsTalk API . Below a Python function that creates assets. def create_assets ( device_file ): \"\"\" Create the assets on a ground Parameters ---------- device_file: str device json file Returns ------- asset_list: list list of created assets Example ------- >>> import json >>> import requests >>> asset_list = create_assets(\"device.json\") \"\"\" with open ( device_file ) as json_file : device = json . load ( json_file ) url = \"https://\" + device [ \"device\" ][ \"authentication\" ][ \"api\" ] \\ + \"/device/\" + device [ \"device\" ][ \"authentication\" ][ \"Device_ID\" ] \\ + \"/assets\" asset_list = [] for asset_nmb in range ( len ( device [ \"device\" ][ \"assets\" ])): asset = 'asset#' + str ( asset_nmb ) payload = { \"name\" : device [ \"device\" ][ \"assets\" ][ asset ][ \"name\" ], \"title\" : device [ \"device\" ][ \"assets\" ][ asset ][ \"title\" ], \"description\" : device [ \"device\" ][ \"assets\" ][ asset ][ \"description\" ], \"is\" : device [ \"device\" ][ \"assets\" ][ asset ][ \"kind\" ], \"profile\" : device [ \"device\" ][ \"assets\" ][ asset ][ \"profile\" ] } headers = { 'Content-Type' : 'application/json' , 'Authorization' : device [ \"device\" ][ \"authentication\" ][ \"Ground_Token\" ] } response = requests . request ( \"POST\" , url , headers = headers , \\ data = str ( payload ), timeout = 10 ) asset_list . append ( response . json ()) return asset_list import json import requests asset_list = create_assets ( \"device.json\" )","title":"device JSON file (device.json)"},{"location":"Cloud_platform/#pinboard","text":"Pinboard let you visualize the collected data. Create and arrange Pinboard","title":"Pinboard"},{"location":"Retrieve_data/","text":"Retrieve Data def _get_cloud_asset_data ( device , time_from , time_to , asset_name , pagenmb ): \"\"\" Retrieves paged collection of historical asset states within provided time range. https://api.allthingstalk.io/swagger/ui/index#operation/AssetStates_GetAssetHistoricalStates Parameters ---------- device: type dict device description (defined in a json file) time_from: str start time, ex. 2020-09-08T00:00:00 (iso8601 format) time_to: str end time, ex. 2020-09-08T23:59:59 (iso8601 format) pagenmb: int Page in the result set Returns ------- response.json()['data']: \"\"\" url = \"https://\" + device [ \"device\" ][ \"authentication\" ][ \"api\" ] + \\ \"/device/\" + device [ \"device\" ][ \"authentication\" ][ \"Device_ID\" ] + \\ \"/asset/\" + asset_name + \"/states?from=\" + time_from + \"&to=\" + time_to + \"&page\" + str ( pagenmb ) payload = {} headers = { 'Authorization' : device [ \"device\" ][ \"authentication\" ][ \"Ground_Token\" ], 'Content-Type' : 'application/json' } response = requests . request ( \"GET\" , url , headers = headers , data = payload ) return response . json ()[ 'data' ] def _fill_missing_data ( timestamp , data ): k = 0 new_data = [] for i in range ( len ( timestamp )): if timestamp [ i ] == data [ k ][ 'at' ]: new_data . append ( data [ k ]) k = k + 1 else : new_data . append ({ 'at' : timestamp [ i ], 'data' : - 666 }) return new_data def _get_timestamps ( cloud_data ): length = [] for i in range ( len ( cloud_data )): length . append ( len ( cloud_data [ i ])) pos_max_value = length . index ( max ( length )) timestamp = [] for i in range ( max ( length )): timestamp . append ( cloud_data [ pos_max_value ][ i ][ 'at' ]) return timestamp def cloud_data_to_df ( device , time_from , time_to ): \"\"\" Retrieve Cloud data and translate it to a pandas dataframe Raw data from the assets: Counter, Temperature_degC, Humidity_perc, CO2_ppm Important: ---------- - take max. 24h or 1 day - time in UTC - ISO 8601 Format Parameters ---------- device: type dict device description (defined in a json file) time_from: str start time, ex. 2020-09-08T00:00:00 (iso8601 format) time_to: str end time, ex. 2020-09-08T23:59:59 (iso8601 format) Returns ------- cloud_data_df: df a pandas dataframe is returned Example ------- >>> import json >>> import pandas as pd \"\"\" columns = [ 'time' ] for asset_nmb in range ( len ( device [ \"device\" ][ \"assets\" ])): asset = 'asset#' + str ( asset_nmb ) columns . append ( device [ \"device\" ][ \"assets\" ][ asset ][ \"name\" ]) cloud_data_df = pd . DataFrame ( index = range ( 0 ), columns = columns ) asset_name = [] asset_unit = [] for asset_nmb in range ( len ( device [ \"device\" ][ \"assets\" ])): asset = 'asset#' + str ( asset_nmb ) asset_name . append ( device [ \"device\" ][ \"assets\" ][ asset ][ \"name\" ]) asset_unit . append ( device [ \"device\" ][ \"assets\" ][ asset ][ \"profile\" ][ \"unit\" ]) cloud_data = [] for name in asset_name : cloud_data . append ( _get_cloud_asset_data ( device , time_from , time_to , name , 0 )) # ------------------------------------------------------------------------------------------------------------------ new_cloud_data = [] for i in range ( len ( cloud_data )): new_cloud_data . append ( _fill_missing_data ( _get_timestamps ( cloud_data ), cloud_data [ i ])) cloud_data = new_cloud_data # ------------------------------------------------------------------------------------------------------------------ for k in range ( len ( cloud_data [ 0 ])): date_time_str = cloud_data [ 0 ][ k ][ 'at' ][ 0 : 10 ] + ' ' + cloud_data [ 0 ][ k ][ 'at' ][ 11 : 19 ] sample = { 'time' : datetime . datetime . strptime ( date_time_str , '%Y-%m- %d %H:%M:%S' ), asset_name [ 0 ]: int ( cloud_data [ 0 ][ k ][ 'data' ]), asset_name [ 1 ]: float ( cloud_data [ 1 ][ k ][ 'data' ]), asset_name [ 2 ]: float ( cloud_data [ 2 ][ k ][ 'data' ]), asset_name [ 3 ]: int ( cloud_data [ 3 ][ k ][ 'data' ]), } cloud_data_df = cloud_data_df . append ( sample , ignore_index = True ) return cloud_data_df Below an Python example script where we send 10 samples (temperature, humidity and CO 2 ) to the Cloud. # data samples import numpy as np import matplotlib.pyplot as plt # 10 samples nmb_samples = 10 Temp_degC = np . linspace ( 10 , 150 , num = nmb_samples ) Hum_perc = np . linspace ( 10 , 100 , num = nmb_samples ) CO2_ppm = np . linspace ( 0 , 2500 , num = nmb_samples ) fig , ( ax1 , ax2 , ax3 ) = plt . subplots ( 1 , 3 , figsize = ( 15 , 5 )) ax1 . set ( xlabel = 'sample' , ylabel = 'Temperature [\u00b0C]' ) ax1 . plot ( Temp_degC , 'ro' ) ax1 . grid () ax2 . set ( xlabel = 'sample' , ylabel = 'Humidity [%]' ) ax2 . plot ( Hum_perc , 'ro' ) ax2 . grid () ax3 . set ( xlabel = 'sample' , ylabel = '$CO_ {2} $ [ppm]' ) ax3 . plot ( CO2_ppm , 'ro' ) ax3 . grid () fig . tight_layout () import time import datetime import json import requests import serial with open ( 'device.json' ) as json_file : device = json . load ( json_file ) # Time between two samples SAMPLING_TIME = 20 nmb_samples = 10 # send data to the Cloud for i in range ( nmb_samples ): start_sample = time . perf_counter () timestamp = datetime . datetime . utcnow () . isoformat () sensor_data = [ 'OK' , str ( i ), str ( round ( Temp_degC [ i ], 1 )), str ( int ( Hum_perc [ i ])), str ( int ( CO2_ppm [ i ])), 'X \\r\\n ' ] response = send_data ( device , timestamp , sensor_data ) print ( 'sample:' , i , ' - ' , timestamp , ' - ' , sensor_data , ' - ' , response ) finish_sample = time . perf_counter () time . sleep ( int ( SAMPLING_TIME ) - int ( round ( finish_sample - start_sample , 2 ))) Terminal output: sample: 0 - 2021-08-27T08:32:53.982653 - ['OK', '0', '10.0', '10', '0', 'X\\r\\n'] - ok sample: 1 - 2021-08-27T08:33:14.326736 - ['OK', '1', '25.6', '20', '277', 'X\\r\\n'] - ok sample: 2 - 2021-08-27T08:33:34.558799 - ['OK', '2', '41.1', '30', '555', 'X\\r\\n'] - ok sample: 3 - 2021-08-27T08:33:54.771425 - ['OK', '3', '56.7', '40', '833', 'X\\r\\n'] - ok sample: 4 - 2021-08-27T08:34:15.004256 - ['OK', '4', '72.2', '50', '1111', 'X\\r\\n'] - ok sample: 5 - 2021-08-27T08:34:35.217754 - ['OK', '5', '87.8', '60', '1388', 'X\\r\\n'] - ok sample: 6 - 2021-08-27T08:34:55.440844 - ['OK', '6', '103.3', '70', '1666', 'X\\r\\n'] - ok sample: 7 - 2021-08-27T08:35:15.669162 - ['OK', '7', '118.9', '80', '1944', 'X\\r\\n'] - ok sample: 8 - 2021-08-27T08:35:35.883873 - ['OK', '8', '134.4', '90', '2222', 'X\\r\\n'] - ok sample: 9 - 2021-08-27T08:35:56.144285 - ['OK', '9', '150.0', '100', '2500', 'X\\r\\n'] - ok Data on the pinboard: Below the Python script to retrieve data from the Cloud. import json import pandas as pd with open ( 'device.json' ) as json_file : device = json . load ( json_file ) time_from = '2021-08-27T08:32:53' time_to = '2021-08-27T08:35:57' cloud_data_df = cloud_data_to_df ( device , time_from , time_to ) cloud_data_df . head ( 10 ) Dataframe (data from the Cloud): Comparison, data send and data retrieved. fig , ( ax1 , ax2 , ax3 ) = plt . subplots ( 1 , 3 , figsize = ( 15 , 5 )) ax1 . set ( xlabel = 'sample' , ylabel = 'Temperature [\u00b0C]' ) ax1 . plot ( Temp_degC , 'ro' , label = 'data' ) ax1 . plot ( cloud_data_df [ 'Temperature_degC' ], 'bx' , label = 'Cloud data' ) ax1 . grid () ax1 . legend () ax2 . set ( xlabel = 'sample' , ylabel = 'Humidity [%]' ) ax2 . plot ( Hum_perc , 'ro' , label = 'data' ) ax2 . plot ( cloud_data_df [ 'Humidity_perc' ], 'bx' , label = 'Cloud data' ) ax2 . grid () ax2 . legend () ax3 . set ( xlabel = 'sample' , ylabel = '$CO_ {2} $ [ppm]' ) ax3 . plot ( CO2_ppm , 'ro' , label = 'data' ) ax3 . plot ( cloud_data_df [ 'CO2_ppm' ], 'bx' , label = 'Cloud data' ) ax3 . grid () ax3 . legend () fig . tight_layout ()","title":"Retrieve data"},{"location":"Retrieve_data/#retrieve-data","text":"def _get_cloud_asset_data ( device , time_from , time_to , asset_name , pagenmb ): \"\"\" Retrieves paged collection of historical asset states within provided time range. https://api.allthingstalk.io/swagger/ui/index#operation/AssetStates_GetAssetHistoricalStates Parameters ---------- device: type dict device description (defined in a json file) time_from: str start time, ex. 2020-09-08T00:00:00 (iso8601 format) time_to: str end time, ex. 2020-09-08T23:59:59 (iso8601 format) pagenmb: int Page in the result set Returns ------- response.json()['data']: \"\"\" url = \"https://\" + device [ \"device\" ][ \"authentication\" ][ \"api\" ] + \\ \"/device/\" + device [ \"device\" ][ \"authentication\" ][ \"Device_ID\" ] + \\ \"/asset/\" + asset_name + \"/states?from=\" + time_from + \"&to=\" + time_to + \"&page\" + str ( pagenmb ) payload = {} headers = { 'Authorization' : device [ \"device\" ][ \"authentication\" ][ \"Ground_Token\" ], 'Content-Type' : 'application/json' } response = requests . request ( \"GET\" , url , headers = headers , data = payload ) return response . json ()[ 'data' ] def _fill_missing_data ( timestamp , data ): k = 0 new_data = [] for i in range ( len ( timestamp )): if timestamp [ i ] == data [ k ][ 'at' ]: new_data . append ( data [ k ]) k = k + 1 else : new_data . append ({ 'at' : timestamp [ i ], 'data' : - 666 }) return new_data def _get_timestamps ( cloud_data ): length = [] for i in range ( len ( cloud_data )): length . append ( len ( cloud_data [ i ])) pos_max_value = length . index ( max ( length )) timestamp = [] for i in range ( max ( length )): timestamp . append ( cloud_data [ pos_max_value ][ i ][ 'at' ]) return timestamp def cloud_data_to_df ( device , time_from , time_to ): \"\"\" Retrieve Cloud data and translate it to a pandas dataframe Raw data from the assets: Counter, Temperature_degC, Humidity_perc, CO2_ppm Important: ---------- - take max. 24h or 1 day - time in UTC - ISO 8601 Format Parameters ---------- device: type dict device description (defined in a json file) time_from: str start time, ex. 2020-09-08T00:00:00 (iso8601 format) time_to: str end time, ex. 2020-09-08T23:59:59 (iso8601 format) Returns ------- cloud_data_df: df a pandas dataframe is returned Example ------- >>> import json >>> import pandas as pd \"\"\" columns = [ 'time' ] for asset_nmb in range ( len ( device [ \"device\" ][ \"assets\" ])): asset = 'asset#' + str ( asset_nmb ) columns . append ( device [ \"device\" ][ \"assets\" ][ asset ][ \"name\" ]) cloud_data_df = pd . DataFrame ( index = range ( 0 ), columns = columns ) asset_name = [] asset_unit = [] for asset_nmb in range ( len ( device [ \"device\" ][ \"assets\" ])): asset = 'asset#' + str ( asset_nmb ) asset_name . append ( device [ \"device\" ][ \"assets\" ][ asset ][ \"name\" ]) asset_unit . append ( device [ \"device\" ][ \"assets\" ][ asset ][ \"profile\" ][ \"unit\" ]) cloud_data = [] for name in asset_name : cloud_data . append ( _get_cloud_asset_data ( device , time_from , time_to , name , 0 )) # ------------------------------------------------------------------------------------------------------------------ new_cloud_data = [] for i in range ( len ( cloud_data )): new_cloud_data . append ( _fill_missing_data ( _get_timestamps ( cloud_data ), cloud_data [ i ])) cloud_data = new_cloud_data # ------------------------------------------------------------------------------------------------------------------ for k in range ( len ( cloud_data [ 0 ])): date_time_str = cloud_data [ 0 ][ k ][ 'at' ][ 0 : 10 ] + ' ' + cloud_data [ 0 ][ k ][ 'at' ][ 11 : 19 ] sample = { 'time' : datetime . datetime . strptime ( date_time_str , '%Y-%m- %d %H:%M:%S' ), asset_name [ 0 ]: int ( cloud_data [ 0 ][ k ][ 'data' ]), asset_name [ 1 ]: float ( cloud_data [ 1 ][ k ][ 'data' ]), asset_name [ 2 ]: float ( cloud_data [ 2 ][ k ][ 'data' ]), asset_name [ 3 ]: int ( cloud_data [ 3 ][ k ][ 'data' ]), } cloud_data_df = cloud_data_df . append ( sample , ignore_index = True ) return cloud_data_df Below an Python example script where we send 10 samples (temperature, humidity and CO 2 ) to the Cloud. # data samples import numpy as np import matplotlib.pyplot as plt # 10 samples nmb_samples = 10 Temp_degC = np . linspace ( 10 , 150 , num = nmb_samples ) Hum_perc = np . linspace ( 10 , 100 , num = nmb_samples ) CO2_ppm = np . linspace ( 0 , 2500 , num = nmb_samples ) fig , ( ax1 , ax2 , ax3 ) = plt . subplots ( 1 , 3 , figsize = ( 15 , 5 )) ax1 . set ( xlabel = 'sample' , ylabel = 'Temperature [\u00b0C]' ) ax1 . plot ( Temp_degC , 'ro' ) ax1 . grid () ax2 . set ( xlabel = 'sample' , ylabel = 'Humidity [%]' ) ax2 . plot ( Hum_perc , 'ro' ) ax2 . grid () ax3 . set ( xlabel = 'sample' , ylabel = '$CO_ {2} $ [ppm]' ) ax3 . plot ( CO2_ppm , 'ro' ) ax3 . grid () fig . tight_layout () import time import datetime import json import requests import serial with open ( 'device.json' ) as json_file : device = json . load ( json_file ) # Time between two samples SAMPLING_TIME = 20 nmb_samples = 10 # send data to the Cloud for i in range ( nmb_samples ): start_sample = time . perf_counter () timestamp = datetime . datetime . utcnow () . isoformat () sensor_data = [ 'OK' , str ( i ), str ( round ( Temp_degC [ i ], 1 )), str ( int ( Hum_perc [ i ])), str ( int ( CO2_ppm [ i ])), 'X \\r\\n ' ] response = send_data ( device , timestamp , sensor_data ) print ( 'sample:' , i , ' - ' , timestamp , ' - ' , sensor_data , ' - ' , response ) finish_sample = time . perf_counter () time . sleep ( int ( SAMPLING_TIME ) - int ( round ( finish_sample - start_sample , 2 ))) Terminal output: sample: 0 - 2021-08-27T08:32:53.982653 - ['OK', '0', '10.0', '10', '0', 'X\\r\\n'] - ok sample: 1 - 2021-08-27T08:33:14.326736 - ['OK', '1', '25.6', '20', '277', 'X\\r\\n'] - ok sample: 2 - 2021-08-27T08:33:34.558799 - ['OK', '2', '41.1', '30', '555', 'X\\r\\n'] - ok sample: 3 - 2021-08-27T08:33:54.771425 - ['OK', '3', '56.7', '40', '833', 'X\\r\\n'] - ok sample: 4 - 2021-08-27T08:34:15.004256 - ['OK', '4', '72.2', '50', '1111', 'X\\r\\n'] - ok sample: 5 - 2021-08-27T08:34:35.217754 - ['OK', '5', '87.8', '60', '1388', 'X\\r\\n'] - ok sample: 6 - 2021-08-27T08:34:55.440844 - ['OK', '6', '103.3', '70', '1666', 'X\\r\\n'] - ok sample: 7 - 2021-08-27T08:35:15.669162 - ['OK', '7', '118.9', '80', '1944', 'X\\r\\n'] - ok sample: 8 - 2021-08-27T08:35:35.883873 - ['OK', '8', '134.4', '90', '2222', 'X\\r\\n'] - ok sample: 9 - 2021-08-27T08:35:56.144285 - ['OK', '9', '150.0', '100', '2500', 'X\\r\\n'] - ok Data on the pinboard: Below the Python script to retrieve data from the Cloud. import json import pandas as pd with open ( 'device.json' ) as json_file : device = json . load ( json_file ) time_from = '2021-08-27T08:32:53' time_to = '2021-08-27T08:35:57' cloud_data_df = cloud_data_to_df ( device , time_from , time_to ) cloud_data_df . head ( 10 ) Dataframe (data from the Cloud): Comparison, data send and data retrieved. fig , ( ax1 , ax2 , ax3 ) = plt . subplots ( 1 , 3 , figsize = ( 15 , 5 )) ax1 . set ( xlabel = 'sample' , ylabel = 'Temperature [\u00b0C]' ) ax1 . plot ( Temp_degC , 'ro' , label = 'data' ) ax1 . plot ( cloud_data_df [ 'Temperature_degC' ], 'bx' , label = 'Cloud data' ) ax1 . grid () ax1 . legend () ax2 . set ( xlabel = 'sample' , ylabel = 'Humidity [%]' ) ax2 . plot ( Hum_perc , 'ro' , label = 'data' ) ax2 . plot ( cloud_data_df [ 'Humidity_perc' ], 'bx' , label = 'Cloud data' ) ax2 . grid () ax2 . legend () ax3 . set ( xlabel = 'sample' , ylabel = '$CO_ {2} $ [ppm]' ) ax3 . plot ( CO2_ppm , 'ro' , label = 'data' ) ax3 . plot ( cloud_data_df [ 'CO2_ppm' ], 'bx' , label = 'Cloud data' ) ax3 . grid () ax3 . legend () fig . tight_layout ()","title":"Retrieve Data"},{"location":"Rules/","text":"Rules AllThingsTalk Platform comes with an integrated rules engine. A rules engine lets you automate work by defining actions that need to be taken in response to a set of triggers. For example, you could make it turn the lights on when you open the door, dispense cat food at predefined times, or notify you if your package is handled improperly in transport. Use case Reference The CO2 content of the air should, ideally, not exceed 900 ppm and under no circumstances should it exceed the standard of 1200 ppm . reference The following rules are set: References: get started with rules create rules to your needs create custom rules in EARL Cloud Setup Create Virtual asset First, create a virtual asset. Rules setup Click on Rules \u2192 New Rule Rule definition: On the Pinboard define a label: click on New Pin \u2192 Label Choose an asset = CO2_indicator Test Below a Python test script to test the rule definition. def decoder ( num_values ): value_cat = [] for num_label in num_values : if num_label >= 1200 : value_cat . append ( 'Bad' ) elif num_label >= 900 : value_cat . append ( 'Moderate' ) else : value_cat . append ( 'Good' ) return value_cat def send_asset_data_to_cloud ( device , asset_name , payload_timestamp , payload_value ): \"\"\" Send a value to an asset Parameters ---------- device: type dict device description (defined in a json file) asset_name: str name of the assets payload_timestamp: str timestamp payload_value: payload value Returns ------- message: str ConnectionOK: data is send successful ConnectionError: a Connection error occurred. (https://docs.python-requests.org/en/master/_modules/requests/exceptions/) HTTPError: an HTTP error occurred (https://docs.python-requests.org/en/master/_modules/requests/exceptions/) \"\"\" headers = { 'Content-Type' : 'application/json' , 'Authorization' : device [ \"device\" ][ \"authentication\" ][ \"Ground_Token\" ] } # https://api.allthingstalk.io/swagger/ui/index url = \"https://\" + device [ \"device\" ][ \"authentication\" ][ \"api\" ] + \\ \"/device/\" + device [ \"device\" ][ \"authentication\" ][ \"Device_ID\" ] + \\ \"/state\" payload = { asset_name : { \"value\" : payload_value , \"at\" : payload_timestamp } } try : response = requests . request ( \"PUT\" , url , headers = headers , json = payload ) response . raise_for_status () message = 'ConnectionOK' return message except requests . exceptions . ConnectionError as exception : message = 'ConnectionError' return message except requests . exceptions . HTTPError as exception : message = 'HTTPError' return message def get_asset_data_from_cloud ( device , asset_name , payload_timestamp ): \"\"\" Obtain asset data from the Cloud Parameters ---------- device: type dict device description (defined in a json file) asset_name: str name of the assets payload_timestamp: str timestamp Returns ------- message: str or float data: the asset data ConnectionError: a Connection error occurred. (https://docs.python-requests.org/en/master/_modules/requests/exceptions/) HTTPError: an HTTP error occurred (https://docs.python-requests.org/en/master/_modules/requests/exceptions/) \"\"\" # https://api.allthingstalk.io/swagger/ui/index url = \"https://\" + device [ \"device\" ][ \"authentication\" ][ \"api\" ] \\ + \"/device/\" + device [ \"device\" ][ \"authentication\" ][ \"Device_ID\" ] \\ + \"/asset/\" + asset_name + \"/states?from=\" + payload_timestamp + \"&page0\" payload = {} headers = { 'Authorization' : device [ \"device\" ][ \"authentication\" ][ \"Ground_Token\" ], 'Content-Type' : 'application/json' } try : response = requests . request ( \"GET\" , url , headers = headers , data = payload ) response . raise_for_status () return response . json ()[ 'data' ] except requests . exceptions . ConnectionError as exception : message = 'ConnectionError' return message except requests . exceptions . HTTPError as exception : message = 'HTTPError' return message import datetime import time import json import requests with open ( 'device.json' ) as json_file : device = json . load ( json_file ) asset_name = 'CO2_ppm' print ( '------------------' ) print ( 'Asset:' , asset_name ) print ( '------------------' ) start_datetime = datetime . datetime . utcnow () . isoformat () # Create a random list of payload values (risk values) between 1 and 10 (10 inclusive) from random import randrange payload = [] data_from_cloud = [] timestamp = [] label_from_cloud = [] value_from_cloud = [] payload = [ 1250 , 950 , 400 , 950 , 1250 , 950 , 400 ] print ( 'Payload:' , payload ) print ( 'Payload label:' , decoder ( payload )) # send & retrieve risk data for value in payload : payload_timestamp = datetime . datetime . utcnow () . isoformat () timestamp . append ( payload_timestamp ) print ( 'Time:' , payload_timestamp , '- Value:' , value , ',- Label:' , decoder ([ value ])) # Send data send_asset_data_to_cloud ( device , asset_name , payload_timestamp , value ) time . sleep ( 5 ) # Retrieve data data_from_cloud . append ( get_asset_data_from_cloud ( device , asset_name , payload_timestamp )) time . sleep ( 5 ) print ( '------------------' ) print ( 'Data from Cloud.' ) print ( '------------------' ) data_from_cloud ------------------ Asset: CO2_ppm ------------------ Payload: [1250, 950, 400, 950, 1250, 950, 400] Payload label: ['Bad', 'Moderate', 'Good', 'Moderate', 'Bad', 'Moderate', 'Good'] Time: 2021-08-27T09:13:54.643491 - Value: 1250 ,- Label: ['Bad'] Time: 2021-08-27T09:14:05.032053 - Value: 950 ,- Label: ['Moderate'] Time: 2021-08-27T09:14:15.410910 - Value: 400 ,- Label: ['Good'] Time: 2021-08-27T09:14:25.815638 - Value: 950 ,- Label: ['Moderate'] Time: 2021-08-27T09:14:36.196445 - Value: 1250 ,- Label: ['Bad'] Time: 2021-08-27T09:14:46.561765 - Value: 950 ,- Label: ['Moderate'] Time: 2021-08-27T09:14:56.907719 - Value: 400 ,- Label: ['Good'] ------------------ Data from Cloud. ------------------ [[{'at': '2021-08-27T09:13:54.643Z', 'data': 1250}], [{'at': '2021-08-27T09:14:05.032Z', 'data': 950}], [{'at': '2021-08-27T09:14:15.41Z', 'data': 400}], [{'at': '2021-08-27T09:14:25.815Z', 'data': 950}], [{'at': '2021-08-27T09:14:36.196Z', 'data': 1250}], [{'at': '2021-08-27T09:14:46.561Z', 'data': 950}], [{'at': '2021-08-27T09:14:56.907Z', 'data': 400}]]","title":"Rules"},{"location":"Rules/#rules","text":"AllThingsTalk Platform comes with an integrated rules engine. A rules engine lets you automate work by defining actions that need to be taken in response to a set of triggers. For example, you could make it turn the lights on when you open the door, dispense cat food at predefined times, or notify you if your package is handled improperly in transport.","title":"Rules"},{"location":"Rules/#use-case","text":"Reference The CO2 content of the air should, ideally, not exceed 900 ppm and under no circumstances should it exceed the standard of 1200 ppm . reference The following rules are set: References: get started with rules create rules to your needs create custom rules in EARL","title":"Use case"},{"location":"Rules/#cloud-setup","text":"Create Virtual asset First, create a virtual asset. Rules setup Click on Rules \u2192 New Rule Rule definition: On the Pinboard define a label: click on New Pin \u2192 Label Choose an asset = CO2_indicator","title":"Cloud Setup"},{"location":"Rules/#test","text":"Below a Python test script to test the rule definition. def decoder ( num_values ): value_cat = [] for num_label in num_values : if num_label >= 1200 : value_cat . append ( 'Bad' ) elif num_label >= 900 : value_cat . append ( 'Moderate' ) else : value_cat . append ( 'Good' ) return value_cat def send_asset_data_to_cloud ( device , asset_name , payload_timestamp , payload_value ): \"\"\" Send a value to an asset Parameters ---------- device: type dict device description (defined in a json file) asset_name: str name of the assets payload_timestamp: str timestamp payload_value: payload value Returns ------- message: str ConnectionOK: data is send successful ConnectionError: a Connection error occurred. (https://docs.python-requests.org/en/master/_modules/requests/exceptions/) HTTPError: an HTTP error occurred (https://docs.python-requests.org/en/master/_modules/requests/exceptions/) \"\"\" headers = { 'Content-Type' : 'application/json' , 'Authorization' : device [ \"device\" ][ \"authentication\" ][ \"Ground_Token\" ] } # https://api.allthingstalk.io/swagger/ui/index url = \"https://\" + device [ \"device\" ][ \"authentication\" ][ \"api\" ] + \\ \"/device/\" + device [ \"device\" ][ \"authentication\" ][ \"Device_ID\" ] + \\ \"/state\" payload = { asset_name : { \"value\" : payload_value , \"at\" : payload_timestamp } } try : response = requests . request ( \"PUT\" , url , headers = headers , json = payload ) response . raise_for_status () message = 'ConnectionOK' return message except requests . exceptions . ConnectionError as exception : message = 'ConnectionError' return message except requests . exceptions . HTTPError as exception : message = 'HTTPError' return message def get_asset_data_from_cloud ( device , asset_name , payload_timestamp ): \"\"\" Obtain asset data from the Cloud Parameters ---------- device: type dict device description (defined in a json file) asset_name: str name of the assets payload_timestamp: str timestamp Returns ------- message: str or float data: the asset data ConnectionError: a Connection error occurred. (https://docs.python-requests.org/en/master/_modules/requests/exceptions/) HTTPError: an HTTP error occurred (https://docs.python-requests.org/en/master/_modules/requests/exceptions/) \"\"\" # https://api.allthingstalk.io/swagger/ui/index url = \"https://\" + device [ \"device\" ][ \"authentication\" ][ \"api\" ] \\ + \"/device/\" + device [ \"device\" ][ \"authentication\" ][ \"Device_ID\" ] \\ + \"/asset/\" + asset_name + \"/states?from=\" + payload_timestamp + \"&page0\" payload = {} headers = { 'Authorization' : device [ \"device\" ][ \"authentication\" ][ \"Ground_Token\" ], 'Content-Type' : 'application/json' } try : response = requests . request ( \"GET\" , url , headers = headers , data = payload ) response . raise_for_status () return response . json ()[ 'data' ] except requests . exceptions . ConnectionError as exception : message = 'ConnectionError' return message except requests . exceptions . HTTPError as exception : message = 'HTTPError' return message import datetime import time import json import requests with open ( 'device.json' ) as json_file : device = json . load ( json_file ) asset_name = 'CO2_ppm' print ( '------------------' ) print ( 'Asset:' , asset_name ) print ( '------------------' ) start_datetime = datetime . datetime . utcnow () . isoformat () # Create a random list of payload values (risk values) between 1 and 10 (10 inclusive) from random import randrange payload = [] data_from_cloud = [] timestamp = [] label_from_cloud = [] value_from_cloud = [] payload = [ 1250 , 950 , 400 , 950 , 1250 , 950 , 400 ] print ( 'Payload:' , payload ) print ( 'Payload label:' , decoder ( payload )) # send & retrieve risk data for value in payload : payload_timestamp = datetime . datetime . utcnow () . isoformat () timestamp . append ( payload_timestamp ) print ( 'Time:' , payload_timestamp , '- Value:' , value , ',- Label:' , decoder ([ value ])) # Send data send_asset_data_to_cloud ( device , asset_name , payload_timestamp , value ) time . sleep ( 5 ) # Retrieve data data_from_cloud . append ( get_asset_data_from_cloud ( device , asset_name , payload_timestamp )) time . sleep ( 5 ) print ( '------------------' ) print ( 'Data from Cloud.' ) print ( '------------------' ) data_from_cloud ------------------ Asset: CO2_ppm ------------------ Payload: [1250, 950, 400, 950, 1250, 950, 400] Payload label: ['Bad', 'Moderate', 'Good', 'Moderate', 'Bad', 'Moderate', 'Good'] Time: 2021-08-27T09:13:54.643491 - Value: 1250 ,- Label: ['Bad'] Time: 2021-08-27T09:14:05.032053 - Value: 950 ,- Label: ['Moderate'] Time: 2021-08-27T09:14:15.410910 - Value: 400 ,- Label: ['Good'] Time: 2021-08-27T09:14:25.815638 - Value: 950 ,- Label: ['Moderate'] Time: 2021-08-27T09:14:36.196445 - Value: 1250 ,- Label: ['Bad'] Time: 2021-08-27T09:14:46.561765 - Value: 950 ,- Label: ['Moderate'] Time: 2021-08-27T09:14:56.907719 - Value: 400 ,- Label: ['Good'] ------------------ Data from Cloud. ------------------ [[{'at': '2021-08-27T09:13:54.643Z', 'data': 1250}], [{'at': '2021-08-27T09:14:05.032Z', 'data': 950}], [{'at': '2021-08-27T09:14:15.41Z', 'data': 400}], [{'at': '2021-08-27T09:14:25.815Z', 'data': 950}], [{'at': '2021-08-27T09:14:36.196Z', 'data': 1250}], [{'at': '2021-08-27T09:14:46.561Z', 'data': 950}], [{'at': '2021-08-27T09:14:56.907Z', 'data': 400}]]","title":"Test"},{"location":"Sensor_Module/","text":"Sensor Module The sensor module consists of a microcontroller (MCU), the SparFun MicroMod nRF52840 Processer mounted on a MicroMod carrier board, and the SCD30 CO 2 -sensor from Sensirion. The SCD30 is a 'true' CO 2 sensor that will tell you the CO 2 ppm (parts-per-million) composition of ambient air. Sensor Module - Firmware The SparkFun SCD30 CO\u2082 Sensor Library v1.0.13 is used. /* Sensor Module * Copyright (c) 2021 * [*Effecten van luchtkwaliteit op de gezondheid in accommodaties van schepen * (ELGAS) TETRA-project HBC.2019.2033](https://www.kdg.be/ELGAS) * * Permission is hereby granted, free of charge, to any person * obtaining a copy of this software and associated documentation * files (the \"Software\"), to deal in the Software without * restriction, including without limitation the rights to use, * copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the * Software is furnished to do so, subject to the following * conditions: * The above copyright notice and this permission notice shall be * included in all copies or substantial portions of the Software. * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR * OTHER DEALINGS IN THE SOFTWARE. */ #include \"Arduino.h\" #include <Wire.h> #include \"SparkFun_SCD30_Arduino_Library.h\" // http://librarymanager/All#SparkFun_SCD30 SCD30 scd30 ; uint16_t counter = 0 ; struct SCD30Sensor { float Temperature = -999 ; float Humidity = -999 ; uint16_t CO2 = 0 ; } SCD30Sensor ; void serialPrint (){ // Serial output: // OK,Temperature [\u00b0C], Humidity [%], CO2 [ppm],X Serial . print ( \"OK\" ); Serial . print ( \",\" ); Serial . print ( counter ); Serial . print ( \",\" ); Serial . print ( SCD30Sensor . Temperature , 1 ); Serial . print ( \",\" ); Serial . print ( SCD30Sensor . Humidity , 0 ); Serial . print ( \",\" ); Serial . print ( SCD30Sensor . CO2 ); Serial . print ( \",\" ); Serial . println ( \"X\" ); Serial . flush (); } void setup () { Serial . begin ( 115200 ); Wire . begin (); if ( scd30 . begin () == false ) { Serial . println ( \"SCD30 sensor not detected. Please check wiring. Freezing...\" ); while ( 1 ); } Serial . flush (); } void loop () { //The default configuration is used where SCD30 has data ready every two seconds. int inByte = 0 ; if ( Serial . available () > 0 ){ inByte = Serial . read (); } switch ( inByte ){ case 115 : // use a simple 'communication protocol', in this case ASCII lower case letter s counter ++ ; while ( ! scd30 . dataAvailable ()){ // Wait untill data is available } SCD30Sensor . Temperature = scd30 . getTemperature (); SCD30Sensor . Humidity = scd30 . getHumidity (); SCD30Sensor . CO2 = scd30 . getCO2 (); serialPrint (); } } The output on the serial port (in this example COM14): Sensor Module - Python A Python function to read data from the sensor module is shown below. def read_serial ( com_port , baud_rate ): ser = serial . Serial ( com_port , baud_rate , bytesize = 8 , parity = 'N' , \\ stopbits = 1 , timeout = 1 ) ser . flush () ser . write ( bytes ( b \"s\" )) time . sleep ( 2 ) # wait two seconds, the default configuration is used where SCD30 has data ready every two seconds. data = ser . read ( 24 ) ser . close () return data import serial import time COM_PORT = 'com14' BAUD_RATE = '115200' sample = read_serial ( COM_PORT , BAUD_RATE ) print ( sample ) Terminal output: b'OK,1,27.6,47,943,X\\r\\n'","title":"Sensor Module"},{"location":"Sensor_Module/#sensor-module","text":"The sensor module consists of a microcontroller (MCU), the SparFun MicroMod nRF52840 Processer mounted on a MicroMod carrier board, and the SCD30 CO 2 -sensor from Sensirion. The SCD30 is a 'true' CO 2 sensor that will tell you the CO 2 ppm (parts-per-million) composition of ambient air.","title":"Sensor Module"},{"location":"Sensor_Module/#sensor-module-firmware","text":"The SparkFun SCD30 CO\u2082 Sensor Library v1.0.13 is used. /* Sensor Module * Copyright (c) 2021 * [*Effecten van luchtkwaliteit op de gezondheid in accommodaties van schepen * (ELGAS) TETRA-project HBC.2019.2033](https://www.kdg.be/ELGAS) * * Permission is hereby granted, free of charge, to any person * obtaining a copy of this software and associated documentation * files (the \"Software\"), to deal in the Software without * restriction, including without limitation the rights to use, * copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the * Software is furnished to do so, subject to the following * conditions: * The above copyright notice and this permission notice shall be * included in all copies or substantial portions of the Software. * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR * OTHER DEALINGS IN THE SOFTWARE. */ #include \"Arduino.h\" #include <Wire.h> #include \"SparkFun_SCD30_Arduino_Library.h\" // http://librarymanager/All#SparkFun_SCD30 SCD30 scd30 ; uint16_t counter = 0 ; struct SCD30Sensor { float Temperature = -999 ; float Humidity = -999 ; uint16_t CO2 = 0 ; } SCD30Sensor ; void serialPrint (){ // Serial output: // OK,Temperature [\u00b0C], Humidity [%], CO2 [ppm],X Serial . print ( \"OK\" ); Serial . print ( \",\" ); Serial . print ( counter ); Serial . print ( \",\" ); Serial . print ( SCD30Sensor . Temperature , 1 ); Serial . print ( \",\" ); Serial . print ( SCD30Sensor . Humidity , 0 ); Serial . print ( \",\" ); Serial . print ( SCD30Sensor . CO2 ); Serial . print ( \",\" ); Serial . println ( \"X\" ); Serial . flush (); } void setup () { Serial . begin ( 115200 ); Wire . begin (); if ( scd30 . begin () == false ) { Serial . println ( \"SCD30 sensor not detected. Please check wiring. Freezing...\" ); while ( 1 ); } Serial . flush (); } void loop () { //The default configuration is used where SCD30 has data ready every two seconds. int inByte = 0 ; if ( Serial . available () > 0 ){ inByte = Serial . read (); } switch ( inByte ){ case 115 : // use a simple 'communication protocol', in this case ASCII lower case letter s counter ++ ; while ( ! scd30 . dataAvailable ()){ // Wait untill data is available } SCD30Sensor . Temperature = scd30 . getTemperature (); SCD30Sensor . Humidity = scd30 . getHumidity (); SCD30Sensor . CO2 = scd30 . getCO2 (); serialPrint (); } } The output on the serial port (in this example COM14):","title":"Sensor Module - Firmware"},{"location":"Sensor_Module/#sensor-module-python","text":"A Python function to read data from the sensor module is shown below. def read_serial ( com_port , baud_rate ): ser = serial . Serial ( com_port , baud_rate , bytesize = 8 , parity = 'N' , \\ stopbits = 1 , timeout = 1 ) ser . flush () ser . write ( bytes ( b \"s\" )) time . sleep ( 2 ) # wait two seconds, the default configuration is used where SCD30 has data ready every two seconds. data = ser . read ( 24 ) ser . close () return data import serial import time COM_PORT = 'com14' BAUD_RATE = '115200' sample = read_serial ( COM_PORT , BAUD_RATE ) print ( sample ) Terminal output: b'OK,1,27.6,47,943,X\\r\\n'","title":"Sensor Module - Python"},{"location":"Software/","text":"Data Logger - Software The data logger software is very straightforward. def read_serial ( com_port , baud_rate ): ser = serial . Serial ( com_port , baud_rate , bytesize = 8 , parity = 'N' , \\ stopbits = 1 , timeout = 1 ) ser . flush () ser . write ( bytes ( b \"s\" )) time . sleep ( 2 ) # wait two seconds, the default configuration is used where SCD30 has data ready every two seconds. data = ser . read ( 24 ) ser . close () return data def send_data ( device , timestamp , sensor_data ): \"\"\" Sample the sensor data and send it to the Cloud. Parameters ---------- device: type dict device description (defined in a json file) timestamp: type str UTC time sensor_data: type list ['OK', counter, Temperature_degC, Humidity_perc, CO2_ppm, 'X\\r\\n'] Returns ------- message: str ConnectionOK: data is send successful ConnectionError: a Connection error occurred. (https://docs.python-requests.org/en/master/_modules/requests/exceptions/) HTTPError: an HTTP error occurred (https://docs.python-requests.org/en/master/_modules/requests/exceptions/) \"\"\" url = \"https://\" + device [ \"device\" ][ \"authentication\" ][ \"api\" ] \\ + \"/device/\" + device [ \"device\" ][ \"authentication\" ][ \"Device_ID\" ] \\ + \"/state\" headers = { 'Content-Type' : 'application/json' , 'Authorization' : device [ \"device\" ][ \"authentication\" ][ \"Ground_Token\" ] } payload = { device [ \"device\" ][ \"assets\" ][ \"asset#0\" ][ \"name\" ]: { \"value\" : sensor_data [ 1 ], \"at\" : timestamp }, device [ \"device\" ][ \"assets\" ][ \"asset#1\" ][ \"name\" ]: { \"value\" : sensor_data [ 2 ], \"at\" : timestamp }, device [ \"device\" ][ \"assets\" ][ \"asset#2\" ][ \"name\" ]: { \"value\" : sensor_data [ 3 ], \"at\" : timestamp }, device [ \"device\" ][ \"assets\" ][ \"asset#3\" ][ \"name\" ]: { \"value\" : sensor_data [ 4 ], \"at\" : timestamp } } try : response = requests . request ( \"PUT\" , url , headers = headers , json = payload , \\ timeout = int ( device [ \"device\" ][ \"authentication\" ][ \"timeout\" ])) response . raise_for_status () message = 'ok' return message except requests . exceptions . ConnectionError as exception : message = 'ConnectionError' return message except requests . exceptions . HTTPError as exception : message = 'HTTPError' return message Below is an example code where we send ten samples to the Cloud. The time between the samples equals 20 seconds. import time import datetime import json import requests import serial with open ( 'device.json' ) as json_file : device = json . load ( json_file ) # Time between two samples SAMPLING_TIME = 20 # Read 10 samples and send the output to the Cloud for i in range ( 10 ): start_sample = time . perf_counter () timestamp = datetime . datetime . utcnow () . isoformat () sensor_data = read_serial ( device [ \"device\" ][ \"serial\" ][ \"com_port\" ], \\ device [ \"device\" ][ \"serial\" ][ \"baud_rate\" ]) . decode ( \"utf-8\" ) . split ( ',' ) response = send_data ( device , timestamp , sensor_data ) print ( 'sample:' , i , ' - ' , timestamp , ' - ' , sensor_data , ' - ' , response ) finish_sample = time . perf_counter () time . sleep ( int ( SAMPLING_TIME ) - int ( round ( finish_sample - start_sample , 2 ))) Terminal output: sample: 0 - 2021-08-26T15:00:54.008322 - ['OK', '12', '27.6', '47', '1022', 'X\\r\\n'] - ok sample: 1 - 2021-08-26T15:01:14.346990 - ['OK', '13', '27.6', '47', '1012', 'X\\r\\n'] - ok sample: 2 - 2021-08-26T15:01:34.609076 - ['OK', '14', '27.6', '47', '1028', 'X\\r\\n'] - ok sample: 3 - 2021-08-26T15:01:54.859678 - ['OK', '15', '27.6', '47', '1032', 'X\\r\\n'] - ok sample: 4 - 2021-08-26T15:02:15.140923 - ['OK', '16', '27.6', '47', '1032', 'X\\r\\n'] - ok sample: 5 - 2021-08-26T15:02:35.407105 - ['OK', '17', '27.6', '47', '1033', 'X\\r\\n'] - ok sample: 6 - 2021-08-26T15:02:55.652324 - ['OK', '18', '27.6', '47', '1034', 'X\\r\\n'] - ok sample: 7 - 2021-08-26T15:03:15.899682 - ['OK', '19', '27.6', '47', '1039', 'X\\r\\n'] - ok sample: 8 - 2021-08-26T15:03:36.152096 - ['OK', '20', '27.6', '47', '1036', 'X\\r\\n'] - ok sample: 9 - 2021-08-26T15:03:56.556891 - ['OK', '21', '27.6', '47', '1041', 'X\\r\\n'] - ok Pinboard Note. The com_port and baud_rate are defined in device.json \"serial\" : { \"com_port\" : \"com14\" , \"baud_rate\" : \"115200\" }","title":"Data Logger Software"},{"location":"Software/#data-logger-software","text":"The data logger software is very straightforward. def read_serial ( com_port , baud_rate ): ser = serial . Serial ( com_port , baud_rate , bytesize = 8 , parity = 'N' , \\ stopbits = 1 , timeout = 1 ) ser . flush () ser . write ( bytes ( b \"s\" )) time . sleep ( 2 ) # wait two seconds, the default configuration is used where SCD30 has data ready every two seconds. data = ser . read ( 24 ) ser . close () return data def send_data ( device , timestamp , sensor_data ): \"\"\" Sample the sensor data and send it to the Cloud. Parameters ---------- device: type dict device description (defined in a json file) timestamp: type str UTC time sensor_data: type list ['OK', counter, Temperature_degC, Humidity_perc, CO2_ppm, 'X\\r\\n'] Returns ------- message: str ConnectionOK: data is send successful ConnectionError: a Connection error occurred. (https://docs.python-requests.org/en/master/_modules/requests/exceptions/) HTTPError: an HTTP error occurred (https://docs.python-requests.org/en/master/_modules/requests/exceptions/) \"\"\" url = \"https://\" + device [ \"device\" ][ \"authentication\" ][ \"api\" ] \\ + \"/device/\" + device [ \"device\" ][ \"authentication\" ][ \"Device_ID\" ] \\ + \"/state\" headers = { 'Content-Type' : 'application/json' , 'Authorization' : device [ \"device\" ][ \"authentication\" ][ \"Ground_Token\" ] } payload = { device [ \"device\" ][ \"assets\" ][ \"asset#0\" ][ \"name\" ]: { \"value\" : sensor_data [ 1 ], \"at\" : timestamp }, device [ \"device\" ][ \"assets\" ][ \"asset#1\" ][ \"name\" ]: { \"value\" : sensor_data [ 2 ], \"at\" : timestamp }, device [ \"device\" ][ \"assets\" ][ \"asset#2\" ][ \"name\" ]: { \"value\" : sensor_data [ 3 ], \"at\" : timestamp }, device [ \"device\" ][ \"assets\" ][ \"asset#3\" ][ \"name\" ]: { \"value\" : sensor_data [ 4 ], \"at\" : timestamp } } try : response = requests . request ( \"PUT\" , url , headers = headers , json = payload , \\ timeout = int ( device [ \"device\" ][ \"authentication\" ][ \"timeout\" ])) response . raise_for_status () message = 'ok' return message except requests . exceptions . ConnectionError as exception : message = 'ConnectionError' return message except requests . exceptions . HTTPError as exception : message = 'HTTPError' return message Below is an example code where we send ten samples to the Cloud. The time between the samples equals 20 seconds. import time import datetime import json import requests import serial with open ( 'device.json' ) as json_file : device = json . load ( json_file ) # Time between two samples SAMPLING_TIME = 20 # Read 10 samples and send the output to the Cloud for i in range ( 10 ): start_sample = time . perf_counter () timestamp = datetime . datetime . utcnow () . isoformat () sensor_data = read_serial ( device [ \"device\" ][ \"serial\" ][ \"com_port\" ], \\ device [ \"device\" ][ \"serial\" ][ \"baud_rate\" ]) . decode ( \"utf-8\" ) . split ( ',' ) response = send_data ( device , timestamp , sensor_data ) print ( 'sample:' , i , ' - ' , timestamp , ' - ' , sensor_data , ' - ' , response ) finish_sample = time . perf_counter () time . sleep ( int ( SAMPLING_TIME ) - int ( round ( finish_sample - start_sample , 2 ))) Terminal output: sample: 0 - 2021-08-26T15:00:54.008322 - ['OK', '12', '27.6', '47', '1022', 'X\\r\\n'] - ok sample: 1 - 2021-08-26T15:01:14.346990 - ['OK', '13', '27.6', '47', '1012', 'X\\r\\n'] - ok sample: 2 - 2021-08-26T15:01:34.609076 - ['OK', '14', '27.6', '47', '1028', 'X\\r\\n'] - ok sample: 3 - 2021-08-26T15:01:54.859678 - ['OK', '15', '27.6', '47', '1032', 'X\\r\\n'] - ok sample: 4 - 2021-08-26T15:02:15.140923 - ['OK', '16', '27.6', '47', '1032', 'X\\r\\n'] - ok sample: 5 - 2021-08-26T15:02:35.407105 - ['OK', '17', '27.6', '47', '1033', 'X\\r\\n'] - ok sample: 6 - 2021-08-26T15:02:55.652324 - ['OK', '18', '27.6', '47', '1034', 'X\\r\\n'] - ok sample: 7 - 2021-08-26T15:03:15.899682 - ['OK', '19', '27.6', '47', '1039', 'X\\r\\n'] - ok sample: 8 - 2021-08-26T15:03:36.152096 - ['OK', '20', '27.6', '47', '1036', 'X\\r\\n'] - ok sample: 9 - 2021-08-26T15:03:56.556891 - ['OK', '21', '27.6', '47', '1041', 'X\\r\\n'] - ok Pinboard Note. The com_port and baud_rate are defined in device.json \"serial\" : { \"com_port\" : \"com14\" , \"baud_rate\" : \"115200\" }","title":"Data Logger - Software"},{"location":"license/","text":"License * Copyright ( c ) 2021 * TETRA - project HBC .2019.2033 , Effecten van luchtkwaliteit * op de gezondheid in accommodaties van schepen * url : https : //www.kdg.be/ELGAS * * Permission is hereby granted , free of charge , to any person * obtaining a copy of this software and associated documentation * files ( the \"Software\" ), to deal in the Software without * restriction , including without limitation the rights to use , * copy , modify , merge , publish , distribute , sublicense , and / or sell * copies of the Software , and to permit persons to whom the * Software is furnished to do so , subject to the following * conditions : * The above copyright notice and this permission notice shall be * included in all copies or substantial portions of the Software . * THE SOFTWARE IS PROVIDED \"AS IS\" , WITHOUT WARRANTY OF ANY KIND , * EXPRESS OR IMPLIED , INCLUDING BUT NOT LIMITED TO THE WARRANTIES * OF MERCHANTABILITY , FITNESS FOR A PARTICULAR PURPOSE AND * NONINFRINGEMENT . IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT * HOLDERS BE LIABLE FOR ANY CLAIM , DAMAGES OR OTHER LIABILITY , * WHETHER IN AN ACTION OF CONTRACT , TORT OR OTHERWISE , ARISING * FROM , OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR * OTHER DEALINGS IN THE SOFTWARE . */","title":"License"},{"location":"license/#license","text":"* Copyright ( c ) 2021 * TETRA - project HBC .2019.2033 , Effecten van luchtkwaliteit * op de gezondheid in accommodaties van schepen * url : https : //www.kdg.be/ELGAS * * Permission is hereby granted , free of charge , to any person * obtaining a copy of this software and associated documentation * files ( the \"Software\" ), to deal in the Software without * restriction , including without limitation the rights to use , * copy , modify , merge , publish , distribute , sublicense , and / or sell * copies of the Software , and to permit persons to whom the * Software is furnished to do so , subject to the following * conditions : * The above copyright notice and this permission notice shall be * included in all copies or substantial portions of the Software . * THE SOFTWARE IS PROVIDED \"AS IS\" , WITHOUT WARRANTY OF ANY KIND , * EXPRESS OR IMPLIED , INCLUDING BUT NOT LIMITED TO THE WARRANTIES * OF MERCHANTABILITY , FITNESS FOR A PARTICULAR PURPOSE AND * NONINFRINGEMENT . IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT * HOLDERS BE LIABLE FOR ANY CLAIM , DAMAGES OR OTHER LIABILITY , * WHETHER IN AN ACTION OF CONTRACT , TORT OR OTHERWISE , ARISING * FROM , OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR * OTHER DEALINGS IN THE SOFTWARE . */","title":"License"}]}